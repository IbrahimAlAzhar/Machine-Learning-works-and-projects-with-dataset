{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Attention with LSTM - 16 authors","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOjBRkwVWpnaLkKJ7qonZsF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"6gJEr4JWjnjX"},"source":["import os\n","import re\n","import pickle\n","from tqdm import tqdm\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.layers import Dense, Dropout, Embedding, Bidirectional, LSTM\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.callbacks import TensorBoard\n","from sklearn.model_selection import train_test_split\n","# from keras.layers import Embedding\n","from  keras . utils  import  to_categorical\n","from tensorflow.keras.layers import Dense, Input, GlobalMaxPooling1D, Permute\n","from tensorflow.keras.layers import Conv1D,Conv2D, MaxPooling1D, Embedding, Flatten\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.initializers import Constant\n","from tensorflow.keras.layers import Embedding\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.models import Model\n","from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\n","from keras.optimizers import RMSprop\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing import sequence\n","from keras.utils import to_categorical\n","from keras.callbacks import EarlyStopping\n","%matplotlib inline\n","\n","\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from keras.models import Model\n","from keras.layers import LSTM, Activation, Dense, Dropout, Input, Embedding\n","from keras.optimizers import RMSprop\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing import sequence\n","from keras.utils import to_categorical\n","from keras.callbacks import EarlyStopping\n","%matplotlib inline"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bd3aKPTclCjo","executionInfo":{"status":"ok","timestamp":1605129931110,"user_tz":-360,"elapsed":51330,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"67f38f2c-f4e9-4fff-8359-116f896b37a4","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EhJrNaKbksHt"},"source":["import pandas as pd \n","df_train=pd.read_csv('gdrive/My Drive/Thesis Data/Our dataset/OurDataset_train.csv')\n","df_test=pd.read_csv('gdrive/My Drive/Thesis Data/Our dataset/OurDataset_test.csv')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ccs4gygmnCm0","executionInfo":{"status":"ok","timestamp":1605129955128,"user_tz":-360,"elapsed":2075,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"3af601f8-c0e9-4d1e-99c8-8dcf62569097","colab":{"base_uri":"https://localhost:8080/"}},"source":["!git clone -l -s https://github.com/banglakit/bengali-stemmer.git"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Cloning into 'bengali-stemmer'...\n","warning: --local is ignored\n","remote: Enumerating objects: 25, done.\u001b[K\n","remote: Counting objects: 100% (25/25), done.\u001b[K\n","remote: Compressing objects: 100% (17/17), done.\u001b[K\n","remote: Total 94 (delta 5), reused 16 (delta 4), pack-reused 69\u001b[K\n","Unpacking objects: 100% (94/94), done.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4i_tkbOmnC3B","executionInfo":{"status":"ok","timestamp":1605129962170,"user_tz":-360,"elapsed":4679,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"9efde8c8-881c-4f5e-b0ce-376223860077","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install git+https://github.com/banglakit/bengali-stemmer.git    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/banglakit/bengali-stemmer.git\n","  Cloning https://github.com/banglakit/bengali-stemmer.git to /tmp/pip-req-build-tz0mdqm1\n","  Running command git clone -q https://github.com/banglakit/bengali-stemmer.git /tmp/pip-req-build-tz0mdqm1\n","Building wheels for collected packages: bengali-stemmer\n","  Building wheel for bengali-stemmer (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for bengali-stemmer: filename=bengali_stemmer-0.0.1-py2.py3-none-any.whl size=6393 sha256=5349266cf2e9e6c7c20d7bba6019fbe085a4dfc7c927c709ae0cf3921cde8860\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-hkw8025t/wheels/a1/ad/a1/4ba354059b17c00600a14e13a504e7bdb49f20f2f4e2f3639c\n","Successfully built bengali-stemmer\n","Installing collected packages: bengali-stemmer\n","Successfully installed bengali-stemmer-0.0.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lWkDCaU-nC9D","executionInfo":{"status":"ok","timestamp":1605130529940,"user_tz":-360,"elapsed":4250,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"d8723b93-c349-48f7-81a0-6d1f89853a57","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install git+https://github.com/banglakit/bengali-stemmer.git    "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting git+https://github.com/banglakit/bengali-stemmer.git\n","  Cloning https://github.com/banglakit/bengali-stemmer.git to /tmp/pip-req-build-f6vh7j6z\n","  Running command git clone -q https://github.com/banglakit/bengali-stemmer.git /tmp/pip-req-build-f6vh7j6z\n","Requirement already satisfied (use --upgrade to upgrade): bengali-stemmer==0.0.1 from git+https://github.com/banglakit/bengali-stemmer.git in /usr/local/lib/python3.6/dist-packages\n","Building wheels for collected packages: bengali-stemmer\n","  Building wheel for bengali-stemmer (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for bengali-stemmer: filename=bengali_stemmer-0.0.1-py2.py3-none-any.whl size=6393 sha256=9021e3778c0de3b7d76ea1181fb56371f958176b2e502036b10529ae010dfe18\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-_nxx19gu/wheels/a1/ad/a1/4ba354059b17c00600a14e13a504e7bdb49f20f2f4e2f3639c\n","Successfully built bengali-stemmer\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Uvv4juR8nCuv","executionInfo":{"status":"ok","timestamp":1605130533104,"user_tz":-360,"elapsed":1328,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"29152cfe-d103-4e70-b06b-0114935c8219","colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["from bengali_stemmer.rafikamal2014 import RafiStemmer\n","stemmer = RafiStemmer()\n","stemmer.stem_word('বাংলায়')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'বাংলা'"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"B8E5Wd0VnJrb"},"source":["total_data = df_train\n","total_data=total_data.append(df_test, ignore_index = True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ca3w9Pi0nJl-"},"source":["macronum=sorted(set(total_data['label']))\n","macro_to_id = dict((note, number) for number, note in enumerate(macronum))\n","\n","def fun(i):\n","    return macro_to_id[i]\n","\n","total_data['label']=total_data['label'].apply(fun)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B70GvtYxnpjY"},"source":["texts = list(total_data['text'])\n","labels = list(total_data['label'])\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jMfOrEX-np3-"},"source":["def clean_punct(sentence):\n","    cleaned = re.sub(r'[?|!|\\'|\"|#|।|’|‘]', r'', sentence)\n","    cleaned1 = re.sub(r'[.|,|(|)|\\|/]', r'', cleaned)\n","    cleaned = re.sub(r'[০|১|২|৩|৪|৫|৬|৭|৮|৯]', r'', cleaned1)\n","    cleaned1 = re.sub(r'[-|=]', r' ', cleaned)\n","    return cleaned1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iQc55ltYnppJ"},"source":["stopwords = pd.read_csv('gdrive/My Drive/Colab Notebooks/Stopwords.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lc9xfgs6nvZt"},"source":["set_stop = set(stopwords['words'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y1HLNKWxnvm7"},"source":["\n","def pre_process(data):\n","    i=0\n","    str1=' '\n","    final_string = []\n","    final_words = []\n","    all_negative_words = []\n","    s=''\n","\n","    for sentence in data:\n","        filtered_sentence = []\n","\n","        for w in sentence.split():\n","            for cleaned_word in clean_punct(w).split():\n","                if len(cleaned_word)>2:\n","                    if((cleaned_word) not in set_stop):\n","                        s = stemmer.stem_word(cleaned_word)\n","                        if len(s)>2:\n","                            final_words.append(s)\n","                            filtered_sentence.append(s)\n","                    else:\n","                        continue\n","                else:\n","                    continue\n","\n","        str1 = \" \".join(filtered_sentence)\n","        final_string.append(str1)\n","    return final_string"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7Lg1H5rZnvSz"},"source":["texts = pre_process(texts)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EsnS0Jbpn6Os","executionInfo":{"status":"ok","timestamp":1605130661059,"user_tz":-360,"elapsed":1474,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"f388c455-5f26-4bb1-d379-1c1939a74060","colab":{"base_uri":"https://localhost:8080/","height":120}},"source":["texts[0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'দূর ভরত হেস উঠল আপন বালিকা বধূ স্কুল পাঠানো সরলা বিবির টানাটানি সরলা বেথুন স্কুল লোরে হাউজ দুজন ধারণা স্কুল ভালো বেথুন স্কুল বাঙা পাড়া বাংলা মাধ্যম লোরেটো হাউজ সাহেব পাড় ইংরেজি স্কুল বাঙা ছাত্রীর তুলনা ফিরিঙ্গি ছাত্রী বেথুন ছাত্রী সমাজ নাম মহিলা বছর বেথুন ছাত্রী হইচ প্রবেশিকা পরীক্ষা ভালোভাব উত্তীর্ণ অবলা দাস নাম মেয়ে ডাক্তারি পড়ব কলকাতা মেডিক কলেজ ছাত্রী নেয়া অবল কেনো ডাক্তারি পারব শেষ পাঠি মাদ্রাজ মেডিক কলেজ অবল জেদ বাঙলা সরক কুড়ি টাক মাসিক বৃত্তির অনুমোদন দেশ কোথা আন্দোলন বেথুন কলেজ প্রভাব ইলবার্ট বিল সাহেব দেশী মানুষ বিদ্য বুদ্ধি প্রচ লাগল কামিনী নাম তেজস্বিনী ছাত্রীর নেতৃত্ব বেথুন বিক্ষোভ জানি সুর বাড়ুজ্য যেদিন সেদিন বেথুন ছাত্রী কালো বেধ স্কুল লোরেটো হাউজ এসব স্বদেশিয়ানা নিষিদ্ধ প্রভু যিশুর জয়গান নিয়মিত প্রার্থনা ছাত্রী ভালো ইংরেজি শেখ বিলিতি আদব কায়দা রপ্ত পাস ব্যারিস্ পত্নী হিসেব মানি বিবির বয়েস বছর সরল এগারো মামা পিসতু বোন ভাব মাঝ মাঝ তর্ক বয়েস সরল ইংরেজ শাসন সম্পর্ রাগ রাগ ভাব প্রা আবৃত্তি স্বাধীনতা হীনতা বাঁচি বাঁচি বয়েসী পরিবার নিয়ম কাকিমা মামী সরলা ছুট দুজন হাত ইকুল ভর্তি বলো আমার ভালো বউয় আড়ষ্টতা কাটেনি এমনকি বিবাহ নাম মৃণালিনী যশোর গ্রাম ভবতারিণী প্রাসাদ মানুষজন দাস দাসী দিশেহা অবস্থা রূপকথ মতন কুঁড়েঘর রাজবাড়ির বধূ রাজপুত্র মতন রূপবান স্বামী ভালো ভাব হেমেন্দ্রনাথ স্ত্রী নীপময়ীর থাক ব্যবস্থা নীপময়ী বাড়ির রীতিনীতি শেখাচ্ছ বিয় দিন কয়েকদিন উৎসব রেশ থাক কথা বাড়ি শোক ছায়া রবির বিবাহ রাত্র শিলাইদহ সারদাপ্রসাদ গাঙ্গুলির হঠাৎ হৃদরোগ মৃত্যু দিদি সৌদামিনী রবির মায় মতন তিনি সংসার কর্ত্রী সময় সত্যেন্দ্রনাথ খবর তিন পৌঁছ মূৰ্ছা যাচ্ছ বাড়ি সবা ফিসফ কথা একমাত্র বাচ্চা নিয়ম মান রবির স্ত্রী কোথা শিক্ষা গ্ৰহণ সরল তর্ক মূল্য আসল সিদ্ধান্ত নেব জ্ঞানদানন্দিনী ফেল এবার সার্কুল রোড বাড়ি ভাড়া মৃণালিনী সেখান বাড়ি লোরেটো হাউজ দূর বিবির সঙ্গ পারব গাড়ি শাড়ি টাড়ি চলব উত্তম বিলিতি কাপড় কিন স্কার্ট বানানো লাগল ব্যবস্থা অনেক মনঃপূত কাদম্বরীর সাধ স্ত্রী সঙ্গিনী মতন মেয়ে তুলব রবির আলাদা মহল নির্দিষ্ট সাজানো গোছানো সুন্দরভাব বাড়ি বেথুন স্কুল বাড়ির তিন স্কুল পাঠানোর অসুবিধ জ্ঞানদানন্দিনীর ছেল কাদম্বরীর রবির কেড় নেব জ্ঞানদানন্দিনী বাড়ি ভর্তি মানুষ গমগম রবির নিভৃ কথা সুযোগ অন্য সামন কাদম্বরী সহজভাব জিজ্ঞেস ছোট বেথুন পড়াল ভালো বাংল ইস্কুল বিব্রতভাব বলল মেজ বউঠান করলেন… নীপময়ী উপস্থিত তোর অক্ষর ইংরেজি জান কথা দেখ প্রাইমারী ইকুল বাংলা একটু আধটু শিখ ইংরেজির অক্ষরজ্ঞান লোরেটোর ফিরিঙ্গি মেয়ে পড়াশুনো পারব এক্ষুনি ইস্কুল পাঠাব দরক থাক প্রথম শিখি পড়ি দেব তোম একটু মেজ বউঠান বুঝি বলো কথা নীপাময়ী ঝংক তোর বউয় যাব পার नां রবির মুখ দেখ বোঝা জ্ঞানদানন্দিনীর এরকম প্রস্তাব তোল সাহস সঞ্চ পারব কাদম্বরী নিঃশব্দ ছায় মতন বেথুন ইস্কুল বাংল গর্ব বিরোধিতা অগ্রাহ্য এদেশ মেয়ে শিক্ষ প্রতিষ্ঠা বিদ্যাসাগর'"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"sfwzcPhEn6Js"},"source":["def load_data(num_words, sequence_length, test_size=0.25, oov_token=None):\n","    tokenizer = Tokenizer(num_words=num_words, oov_token=oov_token)\n","    num_classes=16\n","    y = to_categorical(np.asarray(labels), num_classes)\n","    tokenizer.fit_on_texts(texts)\n","    X = tokenizer.texts_to_sequences(texts)\n","    X = np.array(X)\n","    # pad sequences with 0's\n","    X = pad_sequences(X, maxlen=sequence_length)\n","    # split data to training and testing sets\n","    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=1)\n","    data = {}\n","    data[\"X_train\"] = X_train\n","    data[\"X_test\"]= X_test\n","    data[\"y_train\"] = y_train\n","    data[\"y_test\"] = y_test\n","    data[\"tokenizer\"] = tokenizer\n","    return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uS-ftE4an_wt"},"source":["d = set()\n","for s in texts:\n","    for ss in list(s.split()):\n","        d.add(ss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-38yqW8Wn_3z","executionInfo":{"status":"ok","timestamp":1605130680604,"user_tz":-360,"elapsed":1455,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"3de5d17a-20a0-481d-f0ac-a3377cbe9001","colab":{"base_uri":"https://localhost:8080/"}},"source":["len(d)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["284632"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"ggEptybun_rz","executionInfo":{"status":"ok","timestamp":1605130687219,"user_tz":-360,"elapsed":1477,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"0b0b02ef-2b3f-4a96-87db-03bd16d2a2d4","colab":{"base_uri":"https://localhost:8080/"}},"source":["max([len(s.split()) for s in texts]) # find the max length"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["606"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"-Si0sCVanpe3"},"source":["MAX_SEQUENCE_LENGTH = 606    #max([len(s.split()) for s in texts]) \n","MAX_NUM_WORDS = 280432 + 1\n","vocab_size = MAX_NUM_WORDS\n","EMBEDDING_DIM = 300\n","VALIDATION_SPLIT = 0.2\n","\n","data = load_data(MAX_NUM_WORDS , MAX_SEQUENCE_LENGTH,VALIDATION_SPLIT)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"g6feRjQwoJcp","executionInfo":{"status":"ok","timestamp":1605130729332,"user_tz":-360,"elapsed":1594,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"92b72d0d-1c53-400b-cf2c-deeb5cf1a3dd","colab":{"base_uri":"https://localhost:8080/"}},"source":["len(data['tokenizer'].word_index)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["280432"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"KjguFegGoJK8"},"source":["max_words = 280432 + 1\n","max_len = 606\n","# tok = Tokenizer(num_words=max_words)\n","# tok.fit_on_texts(X_train)\n","# sequences = tok.texts_to_sequences(X_train)\n","# sequences_matrix = sequence.pad_sequences(sequences,maxlen=max_len)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mcFSv9BLAid4"},"source":["LSTM only"]},{"cell_type":"code","metadata":{"id":"JJioRoPboJEI"},"source":["def RNN():\n","    inputs = Input(name='inputs',shape=[max_len])\n","    layer = Embedding(max_words,300,input_length=max_len)(inputs)\n","    layer = LSTM(64)(layer)\n","    layer = Dense(256,name='FC1')(layer)\n","    layer = Activation('relu')(layer)\n","    layer = Dropout(0.5)(layer)\n","    layer = Dense(16,name='out_layer')(layer)\n","    layer = Activation('softmax')(layer)\n","    model = Model(inputs=inputs,outputs=layer)\n","    return model\n","\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tCIkghWMksdg","executionInfo":{"status":"ok","timestamp":1603326214028,"user_tz":-360,"elapsed":7473,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"d2adbf2c-d05e-4b4b-bdc2-0a4bdfdf7124","colab":{"base_uri":"https://localhost:8080/","height":425}},"source":["model = RNN()\n","model.summary()\n","model.compile(loss='binary_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"functional_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","inputs (InputLayer)          [(None, 606)]             0         \n","_________________________________________________________________\n","embedding (Embedding)        (None, 606, 300)          84129900  \n","_________________________________________________________________\n","lstm (LSTM)                  (None, 64)                93440     \n","_________________________________________________________________\n","FC1 (Dense)                  (None, 256)               16640     \n","_________________________________________________________________\n","activation (Activation)      (None, 256)               0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 256)               0         \n","_________________________________________________________________\n","out_layer (Dense)            (None, 16)                4112      \n","_________________________________________________________________\n","activation_1 (Activation)    (None, 16)                0         \n","=================================================================\n","Total params: 84,244,092\n","Trainable params: 84,244,092\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EfFOkjxjksUl","executionInfo":{"status":"ok","timestamp":1603326748304,"user_tz":-360,"elapsed":530483,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"7e2c515f-8288-4331-a11e-61a823dc4a42","colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["history = model.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=128, epochs=10, verbose=2)\n","# history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=128, epochs=10, verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","113/113 - 52s - loss: 0.1727 - accuracy: 0.3488 - val_loss: 0.1332 - val_accuracy: 0.4449\n","Epoch 2/10\n","113/113 - 51s - loss: 0.1220 - accuracy: 0.4986 - val_loss: 0.1119 - val_accuracy: 0.5498\n","Epoch 3/10\n","113/113 - 51s - loss: 0.0922 - accuracy: 0.6436 - val_loss: 0.0825 - val_accuracy: 0.6848\n","Epoch 4/10\n","113/113 - 51s - loss: 0.0624 - accuracy: 0.7865 - val_loss: 0.0749 - val_accuracy: 0.7393\n","Epoch 5/10\n","113/113 - 51s - loss: 0.0312 - accuracy: 0.9148 - val_loss: 0.0446 - val_accuracy: 0.8820\n","Epoch 6/10\n","113/113 - 52s - loss: 0.0134 - accuracy: 0.9656 - val_loss: 0.0434 - val_accuracy: 0.8945\n","Epoch 7/10\n","113/113 - 52s - loss: 0.0078 - accuracy: 0.9820 - val_loss: 0.0489 - val_accuracy: 0.8851\n","Epoch 8/10\n","113/113 - 52s - loss: 0.0044 - accuracy: 0.9914 - val_loss: 0.0398 - val_accuracy: 0.9174\n","Epoch 9/10\n","113/113 - 52s - loss: 0.0026 - accuracy: 0.9946 - val_loss: 0.0449 - val_accuracy: 0.9037\n","Epoch 10/10\n","113/113 - 52s - loss: 0.0029 - accuracy: 0.9941 - val_loss: 0.0534 - val_accuracy: 0.8823\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f7c1a35e6d8>"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"ZBUsN87WtboV"},"source":["RNN with ATTENTION"]},{"cell_type":"code","metadata":{"id":"jhLtoEpWksPu"},"source":["def RNN():\n","    inputs = Input(name='inputs',shape=[max_len])\n","    layer = Embedding(max_words,300,input_length=max_len)(inputs)\n","    layer = LSTM(64)(layer)\n","    layer = Dense(256,name='FC1')(layer)\n","    layer = Activation('relu')(layer)\n","    layer = Dropout(0.5)(layer)\n","    layer = Dense(16,name='out_layer')(layer)\n","    layer = Activation('softmax')(layer)\n","    model = Model(inputs=inputs,outputs=layer)\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"klvUtRdgksJ6"},"source":["SINGLE_ATTENTION_VECTOR = False\n","APPLY_ATTENTION_BEFORE_LSTM = False\n","def attention_3d_block(inputs):\n","    # inputs.shape = (batch_size, time_steps, input_dim)\n","    input_dim = int(inputs.shape[2])\n","    a = Permute((2, 1))(inputs)\n","    a = Reshape((input_dim, TIME_STEPS))(a) # this line is not useful. It's just to know which dimension is what.\n","    a = Dense(TIME_STEPS, activation='softmax')(a)\n","    if SINGLE_ATTENTION_VECTOR:\n","        a = Lambda(lambda x: K.mean(x, axis=1), name='dim_reduction')(a)\n","        a = RepeatVector(input_dim)(a)\n","    a_probs = Permute((2, 1), name='attention_vec')(a)\n","    # output_attention_mul = merge([inputs, a_probs], name='attention_mul', mode='mul')\n","    output_attention_mul = multiply([inputs, a_probs])\n","    return output_attention_mul"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tAnCVcEltkZP"},"source":["def model_attention_applied_after_lstm():\n","    #inputs = Input(shape=(TIME_STEPS, INPUT_DIM,))\n","    inputs = Input(name='inputs',shape=[max_len])\n","    layer = Embedding(max_words,300,input_length=max_len)(inputs)\n","    \n","    #lstm_units = 64\n","    lstm_units = 128\n","    lstm_out = LSTM(lstm_units, return_sequences=True)(layer)\n","    attention_mul = attention_3d_block(lstm_out)\n","    attention_mul = Flatten()(attention_mul)\n","    output = Dense(16, activation='softmax')(attention_mul)\n","    model = Model(inputs=[inputs], outputs=output)\n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fAz9OssTtldC"},"source":["from keras.layers import merge\n","from keras.layers import multiply\n","from keras.layers.core import *\n","from keras.layers.recurrent import LSTM\n","from keras.models import *\n","\n","from keras.utils.vis_utils import plot_model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q3rnh19ttrca"},"source":["INPUT_DIM = 300\n","TIME_STEPS = max_len"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FjmA-WoStrin"},"source":["m = model_attention_applied_after_lstm()\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o5r7WzO3trZ3","executionInfo":{"status":"ok","timestamp":1605133731016,"user_tz":-360,"elapsed":696,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"31e387d3-9bd1-4ecd-ef79-1edf0f71ecaa","colab":{"base_uri":"https://localhost:8080/"}},"source":["m.summary()\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"functional_3\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","inputs (InputLayer)             [(None, 606)]        0                                            \n","__________________________________________________________________________________________________\n","embedding_1 (Embedding)         (None, 606, 300)     84129900    inputs[0][0]                     \n","__________________________________________________________________________________________________\n","lstm_1 (LSTM)                   (None, 606, 128)     219648      embedding_1[0][0]                \n","__________________________________________________________________________________________________\n","permute_1 (Permute)             (None, 128, 606)     0           lstm_1[0][0]                     \n","__________________________________________________________________________________________________\n","reshape_1 (Reshape)             (None, 128, 606)     0           permute_1[0][0]                  \n","__________________________________________________________________________________________________\n","dense_2 (Dense)                 (None, 128, 606)     367842      reshape_1[0][0]                  \n","__________________________________________________________________________________________________\n","attention_vec (Permute)         (None, 606, 128)     0           dense_2[0][0]                    \n","__________________________________________________________________________________________________\n","multiply_1 (Multiply)           (None, 606, 128)     0           lstm_1[0][0]                     \n","                                                                 attention_vec[0][0]              \n","__________________________________________________________________________________________________\n","flatten_1 (Flatten)             (None, 77568)        0           multiply_1[0][0]                 \n","__________________________________________________________________________________________________\n","dense_3 (Dense)                 (None, 16)           1241104     flatten_1[0][0]                  \n","==================================================================================================\n","Total params: 85,958,494\n","Trainable params: 85,958,494\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"_DT_d2D-jE1f"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"OydTEPHCjJt4"},"source":["bs = 64, lstm units = 64"]},{"cell_type":"code","metadata":{"id":"b1alRTrdsK6x"},"source":["m.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=64, epochs=10, verbose=2)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xX9bu7KFQFu_","executionInfo":{"status":"ok","timestamp":1605132643676,"user_tz":-360,"elapsed":1824719,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"c0db5f25-7f47-4fb5-8f47-a6ebe9d4e148","colab":{"base_uri":"https://localhost:8080/"}},"source":["m.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=64, epochs=10, verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","225/225 - 179s - loss: 0.1998 - accuracy: 0.2882 - val_loss: 0.1473 - val_accuracy: 0.4304\n","Epoch 2/10\n","225/225 - 178s - loss: 0.1041 - accuracy: 0.6234 - val_loss: 0.0656 - val_accuracy: 0.8141\n","Epoch 3/10\n","225/225 - 177s - loss: 0.0322 - accuracy: 0.9187 - val_loss: 0.0284 - val_accuracy: 0.9213\n","Epoch 4/10\n","225/225 - 179s - loss: 0.0089 - accuracy: 0.9818 - val_loss: 0.0183 - val_accuracy: 0.9474\n","Epoch 5/10\n","225/225 - 180s - loss: 0.0034 - accuracy: 0.9939 - val_loss: 0.0154 - val_accuracy: 0.9580\n","Epoch 6/10\n","225/225 - 182s - loss: 0.0014 - accuracy: 0.9981 - val_loss: 0.0145 - val_accuracy: 0.9577\n","Epoch 7/10\n","225/225 - 182s - loss: 6.7827e-04 - accuracy: 0.9992 - val_loss: 0.0134 - val_accuracy: 0.9608\n","Epoch 8/10\n","225/225 - 184s - loss: 4.0738e-04 - accuracy: 0.9997 - val_loss: 0.0119 - val_accuracy: 0.9661\n","Epoch 9/10\n","225/225 - 183s - loss: 2.6048e-04 - accuracy: 0.9997 - val_loss: 0.0117 - val_accuracy: 0.9658\n","Epoch 10/10\n","225/225 - 184s - loss: 1.6686e-04 - accuracy: 0.9998 - val_loss: 0.0116 - val_accuracy: 0.9674\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7wX4dpBBbjp7"},"source":["bs = 128, lstm units = 64"]},{"cell_type":"code","metadata":{"id":"kSE7pGMGt6A-","executionInfo":{"status":"ok","timestamp":1603400571542,"user_tz":-360,"elapsed":202596,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"887f49db-9927-430f-cc00-1b6f96b0c676","colab":{"base_uri":"https://localhost:8080/","height":374}},"source":["m.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=128, epochs=10, verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","113/113 - 99s - loss: 0.2178 - accuracy: 0.2498 - val_loss: 0.2001 - val_accuracy: 0.2997\n","Epoch 2/10\n","113/113 - 98s - loss: 0.1839 - accuracy: 0.3335 - val_loss: 0.1515 - val_accuracy: 0.4521\n","Epoch 3/10\n","113/113 - 97s - loss: 0.1166 - accuracy: 0.5555 - val_loss: 0.1007 - val_accuracy: 0.6004\n","Epoch 4/10\n","113/113 - 97s - loss: 0.0738 - accuracy: 0.7536 - val_loss: 0.0632 - val_accuracy: 0.7922\n","Epoch 5/10\n","113/113 - 96s - loss: 0.0266 - accuracy: 0.9327 - val_loss: 0.0276 - val_accuracy: 0.9226\n","Epoch 6/10\n","113/113 - 95s - loss: 0.0062 - accuracy: 0.9901 - val_loss: 0.0198 - val_accuracy: 0.9457\n","Epoch 7/10\n","113/113 - 96s - loss: 0.0022 - accuracy: 0.9972 - val_loss: 0.0196 - val_accuracy: 0.9449\n","Epoch 8/10\n","113/113 - 95s - loss: 0.0011 - accuracy: 0.9990 - val_loss: 0.0179 - val_accuracy: 0.9482\n","Epoch 9/10\n","113/113 - 95s - loss: 6.5946e-04 - accuracy: 0.9993 - val_loss: 0.0158 - val_accuracy: 0.9569\n","Epoch 10/10\n","113/113 - 95s - loss: 3.6277e-04 - accuracy: 0.9998 - val_loss: 0.0156 - val_accuracy: 0.9591\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f97c78fd550>"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"oe6rcyJIHS1d","executionInfo":{"status":"ok","timestamp":1603400766775,"user_tz":-360,"elapsed":4537,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"92bfd22e-edd7-4928-b72b-ec8a18cf9489","colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=128, epochs=2, verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/2\n","113/113 - 95s - loss: 2.1633e-04 - accuracy: 0.9999 - val_loss: 0.0157 - val_accuracy: 0.9594\n","Epoch 2/2\n","113/113 - 94s - loss: 1.4762e-04 - accuracy: 0.9999 - val_loss: 0.0156 - val_accuracy: 0.9597\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f976a37c6a0>"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"88Y4tk4Pt6M7"},"source":["accr = m.evaluate(test_sequences_matrix,Y_test)\n","print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2tLurNJnaeRb"},"source":["when bs=64, lstm units=64"]},{"cell_type":"code","metadata":{"id":"0bVDBuYHt5tr"},"source":["\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","import matplotlib.pyplot as plt\n","def confussion_mat(model):\n","    # Predict the values from the validation dataset\n","    Y_pred = model.predict(data['X_test'])\n","    # Convert predictions classes to one hot vectors \n","    Y_pred_classes = np.argmax(Y_pred,axis = 1) \n","    # Convert validation observations to one hot vectors\n","    Y_true = np.argmax(data['y_test'],axis = 1) \n","    # compute the confusion matrix\n","    confusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n","    # plot the confusion matrix\n","    f,ax = plt.subplots(figsize=(15, 15))\n","    sns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\n","    plt.xlabel(\"Predicted Label\")\n","    plt.ylabel(\"True Label\")\n","    plt.title(\"Confusion Matrix\")\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qVZOVLVvaioA"},"source":["def history2(history):\n","    # list all data in history\n","    print(history.history.keys())\n","    # summarize history for accuracy\n","    plt.plot(history.history['accuracy'])\n","    plt.plot(history.history['val_accuracy'])\n","    plt.title('model accuracy')\n","    plt.ylabel('accuracy')\n","    plt.xlabel('epoch')\n","    plt.legend(['train', 'test'], loc='upper left')\n","    plt.show()\n","    # summarize history for loss\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.title('model loss')\n","    plt.ylabel('loss')\n","    plt.xlabel('epoch')\n","    plt.legend(['train', 'test'], loc='upper left')\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EE4DKhkgalKI","executionInfo":{"status":"ok","timestamp":1605133635837,"user_tz":-360,"elapsed":1582,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"ed058f46-8578-40a3-c327-3680f4eb906c","colab":{"base_uri":"https://localhost:8080/","height":590}},"source":["history2(history)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BDQOo4d2a4pE","executionInfo":{"status":"ok","timestamp":1605133663585,"user_tz":-360,"elapsed":4525,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"85707c30-dea2-47c8-aa71-d76e25a208d2","colab":{"base_uri":"https://localhost:8080/","height":893}},"source":["confussion_mat(m)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x1080 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"3JYgoH7PbBZs"},"source":["bs = 64, lstm units =128"]},{"cell_type":"code","metadata":{"id":"wC16WeVoa-to","executionInfo":{"status":"ok","timestamp":1605135655352,"user_tz":-360,"elapsed":1902626,"user":{"displayName":"ibrahim al azhar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhcTQUbimVsO7p7wRuyYZSNKei7erJoiKLzcwQ3eoY=s64","userId":"00085534427974934913"}},"outputId":"e23676db-734f-4da3-d8e2-78636acff4fc","colab":{"base_uri":"https://localhost:8080/"}},"source":["m.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","\n","history = m.fit(data['X_train'], data['y_train'], validation_data=(data['X_test'], data['y_test']), batch_size=64, epochs=10, verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","225/225 - 191s - loss: 0.1917 - accuracy: 0.3156 - val_loss: 0.1249 - val_accuracy: 0.5504\n","Epoch 2/10\n","225/225 - 189s - loss: 0.1039 - accuracy: 0.6189 - val_loss: 0.0908 - val_accuracy: 0.6942\n","Epoch 3/10\n","225/225 - 189s - loss: 0.0533 - accuracy: 0.8318 - val_loss: 0.0501 - val_accuracy: 0.8358\n","Epoch 4/10\n","225/225 - 189s - loss: 0.0186 - accuracy: 0.9528 - val_loss: 0.0290 - val_accuracy: 0.9188\n","Epoch 5/10\n","225/225 - 189s - loss: 0.0046 - accuracy: 0.9920 - val_loss: 0.0243 - val_accuracy: 0.9299\n","Epoch 6/10\n","225/225 - 189s - loss: 0.0014 - accuracy: 0.9981 - val_loss: 0.0213 - val_accuracy: 0.9449\n","Epoch 7/10\n","225/225 - 189s - loss: 5.7735e-04 - accuracy: 0.9995 - val_loss: 0.0194 - val_accuracy: 0.9505\n","Epoch 8/10\n","225/225 - 189s - loss: 6.1043e-04 - accuracy: 0.9992 - val_loss: 0.0180 - val_accuracy: 0.9505\n","Epoch 9/10\n","225/225 - 189s - loss: 2.9003e-04 - accuracy: 0.9996 - val_loss: 0.0381 - val_accuracy: 0.9029\n","Epoch 10/10\n","225/225 - 189s - loss: 5.1110e-04 - accuracy: 0.9992 - val_loss: 0.0191 - val_accuracy: 0.9521\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2YRyYWkObVkc"},"source":[""],"execution_count":null,"outputs":[]}]}